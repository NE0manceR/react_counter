{"version":3,"sources":["Counter.tsx","App.tsx","index.tsx"],"names":["Counter","counter","incraseValue","type","onClick","App","state","count","incraseValueL","param","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0NAOaA,EAA2B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAClD,OACE,gCACE,6BACGD,IAEH,wBACEE,KAAK,SACLC,QAAS,WACPF,EAAa,WAHjB,oBAQA,wBACEC,KAAK,SACLC,QAAS,WACPF,EAAa,WAHjB,oBAQA,wBACEC,KAAK,SACLC,QAAS,WACPF,EAAa,aAHjB,0BCrBAG,E,4MACJC,MAAQ,CACNC,MAAO,G,EAGTC,cAAgB,SAACC,GACf,OAAQA,GACN,IAAK,SACH,EAAKC,UAAS,SAACJ,GAAD,MAAY,CAAEC,MAAOD,EAAMC,MAAQ,MACjD,MAEF,IAAK,SACH,EAAKG,UAAS,SAACJ,GAAD,MAAY,CAAEC,MAAOD,EAAMC,MAAQ,QACjD,MAEF,IAAK,WACH,EAAKG,UAAS,SAACJ,GAAD,MACZ,CAAEC,MAAOD,EAAMC,MAAQ,IAAM,EAAID,EAAMC,MAAQ,IAAM,EAAID,EAAMC,MAAQ,Q,4CAS/E,WAAU,IAAD,OACP,OACE,cAAC,EAAD,CACEN,QAASU,KAAKL,MAAMC,MACpBL,aAAc,SAACO,GACb,EAAKD,cAAcC,U,GA/BXG,IAAMC,WAsCTR,IC3CfS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9f4b7d76.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  counter: number,\n  incraseValue: (param:string) => void\n}\n\nexport const Counter: React.FC<Props> = ({ counter, incraseValue }) => {\n  return (\n    <div>\n      <h1>\n        {counter}\n      </h1>\n      <button\n        type=\"button\"\n        onClick={() => {\n          incraseValue('addOne');\n        }}\n      >\n        addOne\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          incraseValue('add100');\n        }}\n      >\n        add100\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          incraseValue('increase');\n        }}\n      >\n        increase\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Counter } from './Counter';\n\ninterface State {\n  count: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    count: 0,\n  };\n\n  incraseValueL = (param:string) => {\n    switch (param) {\n      case 'addOne':\n        this.setState((state) => ({ count: state.count + 1 }));\n        break;\n\n      case 'add100':\n        this.setState((state) => ({ count: state.count + 100 }));\n        break;\n\n      case 'increase':\n        this.setState((state) => (\n          { count: state.count % 5 === 0 ? state.count + 100 + 1 : state.count + 1 }\n        ));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <Counter\n        counter={this.state.count}\n        incraseValue={(param:string) => {\n          this.incraseValueL(param);\n        }}\n      />\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}